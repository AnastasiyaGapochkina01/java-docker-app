def projects = []
def GIT_URL = "git@github.com:AnastasiyaGapochkina01/example-dockerized-apps.git"

node {
    stage('Prepare') {
      projects = sh(script: 'rm -rf example-dockerized-apps.git || true; git clone --single-branch git@github.com:AnastasiyaGapochkina01/example-dockerized-apps.git; git ls-tree -d origin/main --name-only', returnStdout: true).trim().split('\n').collect { it }
    }
}

properties (
  [
    parameters([
      choice(choices: projects, name: "APP"),
      gitParameter(name: 'REVISION', type: 'PT_BRANCH', sortMode: 'DESCENDING_SMART', selectedValue: 'NONE', quickFilterEnabled: true, defaultValue: 'main')
    ])
  ]
)

node {
  env.REPO = "anestesia01/filiz-docker-apps"
  env.DOCKER_TOKEN = credentials('docker_token')

  stage('Checkout') {
    checkout([$class: 'GitSCM', branches: [[name: "${REVISION}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'jenkins-key', url: "${GIT_URL}"]]])
  }

  stage('Build') {
      def buildStatus = sh(script: "docker build -t ${env.REPO}-${params.APP}:${BUILD_NUMBER} ./${params.APP}", returnStatus: true)
      if (buildStatus != 0) {
        error "Docker build failed"
      }
  }

  stage('Push') {
      sh "echo ${env.DOCKER_TOKEN} | docker login -u anestesia01 --password-stdin"
      def pushStatus = sh(script: "docker push ${env.REPO}-${params.APP}:${BUILD_NUMBER}", returnStatus: true)
      if (pushStatus != 0) {
        error "Docker push failed"
      }
  }
}
